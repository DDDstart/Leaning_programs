'''
Библиотеки:
NumPy - работа с числовыми массивами
matplotlib - построение графиков
SciPy - функции для научных вычислений
pandas - таблицы
Scikit-learn - алгоритмы машинного обучения
PythonSeaborn - визуализация статистических данных
'''

sudo pip3 install NumPy matplotlib

# Пример работы с библиотекой NumPy:
from numpy import *
# Создание одномерного массива из списка целых чисел
a = array([2,3,4])
print(a) # [2 3 4]
# Размерность массива (одномерный, двумерный и т.д.)
print(a.ndim) # 1
# Размеры массива (число строк, столбцов и т.д.)
print(a.shape) # (3, )
b = array([(1.5,2,3)], [(4,5,6)]) # НЕ РАБОТАЕТ! Создание двумерного массива из двух последовательностей чисел
print(b)
print(b.ndim) # 2
print(b.shape) # (2, 3)
print(b.size) # 6
z = zerros((3,2)) # НЕ РАБОТАЕТ! 3 и 2 помещаются в дополнительные скобки, чтобы представлять из себя один объект
print(z)
zz = arange(10, 30, 5) # Генерирует массив от 10 до 30 с шагом 5
print(z) # [10 15 20 25] # Генерирует 9 чисет на отрезке от 0 до 2 с равным шагом
l = linspace(0, 2, 9) #
print(l) # [0.   0.25 0.5  0.75 1.   1.25 1.5  1.75 2.  ]
b = arange(12).reshape(4,3) # Превращение одномерного массива в двумерный
print(b) 
#[[ 0  1  2]
# [ 3  4  5]
# [ 6  7  8]
# [ 9 10 11]]
a = array([10,20,30])
b = array(3)
print(a) # [10 20 30]
print(b) # [3]
print(a + b) # [13 23 33]
print(a - b) # [ 7 17 27]
print(a**2) # [100 400 900]
print(a * sin(a)) # [ -5.44021111  18.25890501 -29.64094872]
a < 20 # True, True, True


# Пример работы с библиотекой matplotlib:
from pylab import *
x = linspace(0, 5, 10)
y = x ** 2
print(x)
print(y)
figure()
plot(x, y, 'r') # r - это красный цвет
xlabel('x')
ylabel('y')
title('title')
show() # строит графики






