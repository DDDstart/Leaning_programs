s.add(element) # Добавить элемент множества
s.remove(element) # Удалить элемент множества. При отсутствии удаляемого элемента выдаст ошибку
s.discard(element) # Удалить элемент множества. Не выдает ошибку при отсутствии удаляемого элемента
s.clear() # Удаляет все элементы из множества.
#
'''Пример создания множества'''
s =  set()  # Создание пустого множества
basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}
print(basket)   # {'apple', 'orange', 'pear', 'banana'}
'orange' in basket   # True
'python' in basket   # False

#
basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}
for x in basket:
    print(x) # Результат: banana, apple, orange, pear (выводит не повторяющиеся элементы вразнобой)

#
'''Когда мы создаём объект и присваиваем его переменной, переменная только ссылается
на объект, а не представляет собой этот объект! То есть имя переменной указывает на
ту часть памяти компьютера, где хранится объект. Это называется привязкой имени к
объекту.
Обычно вам не следует об этом беспокоиться, однако есть некоторый неочевидный эффект, о котором нужно помнить:'''
print('Простое присваивание')
shoplist = ['яблоки', 'манго', 'морковь', 'бананы']
mylist = shoplist # mylist - лишь ещё одно имя, указывающее на тот же объект!
del shoplist[0] # Я сделал первую покупку, поэтому удаляю её из списка
print('shoplist:', shoplist)
print('mylist:', mylist)
# Обратите внимание, что и shoplist, и mylist выводят один и тот же список
# без пункта "яблоко", подтверждая тем самым, что они указывают на один
# объект.
print('Копирование при помощи полной вырезки')
mylist = shoplist[:] # создаём копию путём полной вырезки
del mylist[0] # удаляем первый элемент
print('shoplist:', shoplist)
print('mylist:', mylist) # Обратите внимание, что теперь списки разные

#
'''Преобразование строки в множество'''
n = 'abc'
print(n)
s = set(n)
print(s) # {a,b,c}

'''Преобразование списка в множество'''
n = ['abc','def','ghi']
s = set(n)
print(s) # {'abc', 'def', 'ghi'}

#
'''Создание словаря'''
dict() # Создается пустой словарь. Словарю соответствует структура данных dict
dict, {} # Создается проинициализированный словарь
d = {'a':239, 10:100} # 'a' и 10 являются ключами словаря
print(d['a'])
print(d[10])

# 
'''Операции со словарями'''
# Словари: Изменяемы, Элементы не имеют порядка, Все ключи различны, Ключи не изменяемы
dictionary = {...} # Создание словаря
key in dictionary # True
key not in dictionary # False
dictionary[key] = value # Положить в СЛОВАРЬ по такому-то КЛЮЧУ определенное ЗНАЧЕНИЕ
dictionary[key] # Получить значение по ключу. Если ключа нет, то будет ошибка
dictionary.get[key] # Получить значение по ключу. Если ключа нет, то вернет NONE
del.dictionary[key] # Удалить значение по ключу. Ключ так же будет удален

#
'''Перебор элементов словаря'''
d = {'C': 14, 'A': 12, 'T': 9, 'G': 18}
for key in d:
    print(key, end = ' ')   # C A T G
for key in d.keys():
    print(key, end = ' ')   # C A T G (То жк самое)
for value in d.values():
    print(value, end = ' ') # 14 12 9 18
for key, value in d.items():
    print(key, value, end = '; ')   # C 14; A 12; T 9; G 18;

# Для ключа можно хранить не только одно значение, но и несколько значений.
# Тогда ключю нужно сопоставлять список значений

# 
'''Напишите функцию update_dictionary(d, key, value), которая принимает на вход словарь d и два числа: key и value.
Если ключ key есть в словаре d, то добавьте значение value в список, который хранится по этому ключу.
Если ключа key нет в словаре, то нужно добавить значение в список по ключу 2∗key.
Если и ключа 2∗key нет, то нужно добавить ключ 2∗key в словарь и сопоставить ему список из переданного элемента [value].
Требуется реализовать только эту функцию, кода вне её не должно быть.
Функция не должна вызывать внутри себя функции input и print.
Пример работы функции:
d = {}
print(update_dictionary(d, 1, -1))  # None
print(d)                            # {2: [-1]}
update_dictionary(d, 2, -2)
print(d)                            # {2: [-1, -2]}
update_dictionary(d, 1, -3)
print(d)                            # {2: [-1, -2, -3]}'''
def update_dictionary(d, key, value):
