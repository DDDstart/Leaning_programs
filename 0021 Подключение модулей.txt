Модуль содержит функции и данные в отдельном файле.
Объекты из модуля можно импортировать в другие модули.
Имя файла = имя_модуля.py

Например, в файле my_modul.py описана некая функция foo(), для того, чтобы вызвать
эту функцию внутри другой своей программы, нужно в это й программе прописать:

import my_modul
my_modul.foo()

Если в файле описано много функций, можно в своей программе из этого файла импортировать
одну конкретную функцию:

from my_modul import foo
foo()

Можно из модуля импортировать сразу все функции и в дальнейшем вызывать их:

from my_modul import *
foo()

Можно из модуля импортировать функцию, назвать ее по-другому и в дальнейшем вызывать ее по новому имени:
from my_modul import foo as my_foo()
my_foo()

О СТАНДАРТНЫХ МОДУЛЯХ PYTHON МОЖНО ПРОЧИТАТЬ ТУТ: https://docs.python.org/3/library/
--------------------------------------------------------------------------------------------------------

МОДУЛЬ sys:
sys.argv - список аргументов командной строки.

import sys
print(len(sys.argv)) # Выводит количество аргументов (1), с которыми была запущена программа

Если запустить программу как 'python my_prog.py 55 -t', то программа выведет значение '3',
имя самой программы, параметр '55' и '-t'
--------------------------------------------------------------------------------------------------------

МОДУЛЬ subprocess:
Запускает любую другую программу из основной программы.

subprocess.call(args, *, stdin=None, stdout=my_outfile.txt, stderr=None, shell=False, timeout=None)
Запускает программу в соответсивии с аргументами args, дожидается выполнения и возвращает код возврата

Например: subprocess.call(["python", "-h"])

'''Напишите программу, которая подключает модуль math и, используя значение числа 𝜋 из этого модуля,
находит для переданного ей на стандартный ввод радиуса круга периметр этого круга и выводит его на стандартный вывод'''
#
import math
r = float(input('Введите радиус: '))
print(2*math.pi*r)

# Другое решение:
from math import pi
print(float(input()) * pi * 2)

'''Напишите программу, которая запускается из консоли и печатает значения всех переданных аргументов на экран
(имя скрипта выводить не нужно). Не изменяйте порядок аргументов при выводе. Для доступа к аргументам командной
строки программы подключите модуль sys и используйте переменную argv из этого модуля.

Пример работы программы:
> python3 my_solution.py arg1 arg2
arg1 arg2'''
#
import sys
for i in range(1, len(sys.argv)):
   print(sys.argv[i], end=' ')

# Еще одно решение:
import sys
print(*sys.argv[1:])

# Еще одно решение:
print(*__import__("sys").argv[1:])
