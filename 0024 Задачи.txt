'''Напишите программу, которая принимает на стандартный вход список игр футбольных команд с результатом матча
и выводит на стандартный вывод сводную таблицу результатов всех матчей. За победу команде начисляется 3 очка,
за поражение — 0, за ничью — 1. Формат ввода следующий: в первой строке указано целое число n — количество завершенных игр.
После этого идет n строк, в которых записаны результаты игры в следующем формате: Первая_команда;Забито_первой_командой;
Вторая_команда;Забито_второй_командой Вывод программы необходимо оформить следующим образом:
Команда:Всего_игр Побед Ничьих Поражений Всего_очков
Порядок вывода команд произвольный.

Sample Input:
3
Спартак;9;Зенит;10
Локомотив;12;Зенит;3
Спартак;8;Локомотив;15

Sample Output:
Спартак:2 0 0 2 0
Зенит:2 1 0 1 3
Локомотив:2 2 0 0 6'''

# Решение с помощью ChatGPT
# Словарь для хранения статистики команд
teams = {}

# Функция для обновления статистики команды
def update_team_stats(team, games=0, wins=0, draws=0, losses=0, points=0):
    if team not in teams:
        teams[team] = [0, 0, 0, 0, 0]  # Инициализируем: игры, победы, ничьи, поражения, очки
    teams[team][0] += games
    teams[team][1] += wins
    teams[team][2] += draws
    teams[team][3] += losses
    teams[team][4] += points

# Чтение количества матчей
n = int(input())

# Чтение каждого матча
for _ in range(n):
    match = input().split(';')
    team1, goals1, team2, goals2 = match[0], int(match[1]), match[2], int(match[3])
    
    # Все команды сыграли по одной игре
    update_team_stats(team1, games=1)
    update_team_stats(team2, games=1)
    
    # Определение результата матча
    if goals1 > goals2:
        # Победа первой команды
        update_team_stats(team1, wins=1, points=3)
        update_team_stats(team2, losses=1)
    elif goals1 < goals2:
        # Победа второй команды
        update_team_stats(team2, wins=1, points=3)
        update_team_stats(team1, losses=1)
    else:
        # Ничья
        update_team_stats(team1, draws=1, points=1)
        update_team_stats(team2, draws=1, points=1)

# Вывод результатов для каждой команды
for team, stats in teams.items():
    print(f"{team}:{' '.join(map(str, stats))}")

#
# Другое решение
def command(c, res):
    if not c in dct: dct[c] = [0, 0, 0, 0, 0]
    dct[c] = [dct[c][0] + 1, 
                dct[c][1] + 1 if res == 3 else dct[c][1],
                dct[c][2] + 1 if res == 1 else dct[c][2],
                dct[c][3] + 1 if res == 0 else dct[c][3],
                dct[c][4] + res,]  
dct = {}
for i in range(int(input())):
    c1, g1, c2, g2 = input().split(';')    
    command(c1, 3 if g1 > g2 else 1 if g1 == g2 else 0)
    command(c2, 3 if g2 > g1 else 1 if g1 == g2 else 0)
for c in dct:
    print('{}:{} {} {} {} {}'.format(c, *dct[c]))
    
#
# Другое решение
import collections
n  = int(input())
d = dict()
for i in range(n):
    line =  input().split(';')
    d.setdefault(line[0], {'Всего_игр': 0,
                                               'Побед': 0,
                                               'Ничьих': 0,
                                               'Поражений': 0,
                                               'Всего_очков': 0})
    d.setdefault(line[2], {'Всего_игр': 0,
                                               'Побед': 0,
                                               'Ничьих': 0,
                                               'Поражений': 0,
                                               'Всего_очков': 0})
    d[line[0]]['Всего_игр'] += 1
    d[line[2]]['Всего_игр'] += 1
    if int(line[1]) > int(line[3]):
        d[line[0]] ['Побед'] += 1
        d[line[2]] ['Поражений'] += 1
        d[line[0]]['Всего_очков'] += 3
    elif int(line[1]) < int(line[3]):
        d[line[2]] ['Побед'] += 1
        d[line[0]] ['Поражений'] += 1
        d[line[2]]['Всего_очков'] += 3
    elif int(line[1]) == int(line[3]):
        d[line[2]] ['Ничьих'] += 1
        d[line[0]] ['Ничьих'] += 1
        d[line[2]]['Всего_очков'] += 1
        d[line[0]]['Всего_очков'] += 1
for key, val in d.items():
    print(key, end='' )
    print(': ', end='')
    print(val['Всего_игр'], val['Побед'], val['Ничьих'], val[ 'Поражений'], val['Всего_очков'])
    
#
'''В какой-то момент в Институте биоинформатики биологи перестали понимать, что говорят информатики: они говорили каким-то странным набором звуков. 
В какой-то момент один из биологов раскрыл секрет информатиков: они использовали при общении подстановочный шифр, т.е. заменяли каждый символ 
исходного сообщения на соответствующий ему другой символ. Биологи раздобыли ключ к шифру и теперь нуждаются в помощи:
Напишите программу, которая умеет шифровать и расшифровывать шифр подстановки. Программа принимает на вход две строки одинаковой длины, на первой
строке записаны символы исходного алфавита, на второй строке — символы конечного алфавита, после чего идёт строка, которую нужно зашифровать
переданным ключом, и ещё одна строка, которую нужно расшифровать.

Пусть, например, на вход программе передано:
abcd
*d%#
abacabadaba
#*%*d*%

Это значит, что символ a исходного сообщения заменяется на символ * в шифре, b заменяется на d, c — на % и d — на #.
Нужно зашифровать строку abacabadaba и расшифровать строку #*%*d*% с помощью этого шифра. Получаем следующие строки, которые и передаём на вывод программы:
*d*%*d*#*d*
dacabac

Sample Input 1:
abcd
*d%#
abacabadaba
#*%*d*%

Sample Output 1:
*d*%*d*#*d*
dacabac

Sample Input 2:
dcba
badc
dcba
badc

Sample Output 2:
badc
dcba
'''

# Решение с помощью ChatGPT
def substitution_cipher():
    # Чтение входных данных
    source_alphabet = input()
    target_alphabet = input()
    to_encrypt = input()
    to_decrypt = input()
    
    # Создание словарей шифрования и расшифровки
    encrypt_dict = {source_alphabet[i]: target_alphabet[i] for i in range(len(source_alphabet))}
    decrypt_dict = {target_alphabet[i]: source_alphabet[i] for i in range(len(target_alphabet))}
    
    # Шифрование строки
    encrypted_message = ''.join([encrypt_dict[char] for char in to_encrypt])
    
    # Расшифровка строки
    decrypted_message = ''.join([decrypt_dict[char] for char in to_decrypt])
    
    # Вывод результатов
    print(encrypted_message)
    print(decrypted_message)
# Вызов функции
substitution_cipher()
 
 
#
# Другое решение
a,b,c,d=input(),input(),input(),input()
print(''.join(b[a.index(i)] for i in c))
print(''.join(a[b.index(i)] for i in d))


#
# Другое решение
# Считываем 4 строки в цикле
original, coding, first_string, second_string = (input() for i in range(4))
# По индексу символа из оригинала берём символ на замену из кодировки,
# для каждого символа из строки, которую нужно закодировать
print(*[coding[original.find(symbol)] for symbol in first_string], sep='')
# Аналогично, только наоборот :D
print(*[original[coding.find(symbol)] for symbol in second_string], sep='')


#
# Другое решение
source, dest = input(), input()
decoded = input()
encoded = input()
print(decoded.translate(str.maketrans(source, dest)))
print(encoded.translate(str.maketrans(dest, source)))


#
# Другое решение
x=input()
y=input()
X=input()
Y=input()
d={}
for i in range(0,len(x)):
    d[x[i]]=y[i]
for i in range(0,len(X)):
    print(d[X[i]],end='')
print('')    
for i in range(0,len(Y)):
    for key in d.keys():
        if Y[i]==d[key]:
            print(key,end='')


#
'''
Простейшая система проверки орфографии может быть основана на использовании списка известных слов.
Если введённое слово не найдено в этом списке, оно помечается как "ошибка".
Попробуем написать подобную систему.
На вход программе первой строкой передаётся количество d известных нам слов, после чего на d строках
указываются эти слова. Затем передаётся количество l строк текста для проверки, после чего l строк текста.
Выведите уникальные "ошибки" в произвольном порядке. Работу производите без учёта регистра.

Sample Input:
4
champions
we
are
Stepik
3
We are the champignons
We Are The Champions
Stepic

Sample Output:
stepic
champignons
the
'''

# Решение с помощью ChatGPT
def spell_check():
    # Чтение количества известных слов
    d = int(input())
    # Чтение известных слов и приведение их к нижнему регистру
    known_words = {input().strip().lower() for _ in range(d)}
    # Чтение количества строк текста
    l = int(input())
    # Множество для хранения уникальных ошибок
    errors = set()
    # Чтение строк текста
    for _ in range(l):
        # Разбиваем строку на слова, приводим к нижнему регистру и проверяем на наличие в известном списке
        words_in_line = input().strip().lower().split()
        for word in words_in_line:
            if word not in known_words:
                errors.add(word)
    # Вывод всех уникальных ошибок
    for error in errors:
        print(error)
# Вызов функции
spell_check()


#
# Другое решение
dic = {input().lower() for i in range(int(input()))}
wrd = set()
for w in range(int(input())):
    wrd |= {i.lower() for i in input().split()}
print(*wrd.difference(dic), sep="\n")


#
# Другое решение
count_dict = int(input())
dict = []
check_words = []
result = []
#заполняем словарь
for i in range(count_dict):
  dict.append(input().lower())
count_lines = int(input())
#заполняем список проверяемых слов
for i in range(count_lines):
  check_words += input().lower().strip().split(' ')
#выбираем слова которые не проходят проверку
for i in check_words:
  if i not in dict and i not in result:
    result.append(i)
#печатаем
for i in result:
  print(i)
  

#
'''
Группа биологов в институте биоинформатики завела себе черепашку.

После дрессировки черепашка научилась понимать и запоминать указания биологов следующего вида:
север 10
запад 20
юг 30
восток 40
где первое слово — это направление, в котором должна двигаться черепашка, а число после слова — это положительное расстояние в сантиметрах, которое должна пройти черепашка.

Но команды даются быстро, а черепашка ползёт медленно, и программисты догадались, что можно написать программу, которая определит, куда в итоге биологи приведут черепашку. Для этого программисты просят вас написать программу, которая выведет точку, в которой окажется черепашка после всех команд. Для простоты они решили считать, что движение начинается в точке (0, 0), и движение на восток увеличивает первую координату, а на север — вторую.

Программе подаётся на вход число команд 
𝑛
n, которые нужно выполнить черепашке, после чего 
𝑛
n строк с самими командами. Вывести нужно два числа в одну строку: первую и вторую координату конечной точки черепашки. Все координаты целочисленные.

Sample Input:

4
север 10
запад 20
юг 30
восток 40
Sample Output:

20 -20
'''

#Решение с помощью ChatGPT
def turtle_movement():
    # Чтение количества команд
    n = int(input())
    # Начальные координаты черепашки
    x, y = 0, 0
    # Обработка команд
    for _ in range(n):
        command = input().split()
        direction = command[0]
        distance = int(command[1])
        # Изменение координат в зависимости от направления
        if direction == 'север':
            y += distance
        elif direction == 'юг':
            y -= distance
        elif direction == 'восток':
            x += distance
        elif direction == 'запад':
            x -= distance
    # Вывод конечных координат
    print(x, y)
# Вызов функции
turtle_movement()


#
# Другое решение
k=[0,0]
for i in range(int(input())):
    a=[str(i) for i in input().split()]
    if a[0]=='север':
        k[1]+=int(a[1])
    if a[0]=='восток':
        k[0]+=int(a[1])
    if a[0]=='юг':
        k[1]-=int(a[1])
    if a[0]=='запад':
        k[0]-=int(a[1])
print(k[0],k[1],sep=' ')


#
# Другое решение
xy = {'север': 0, 'юг': 0, 'запад': 0, 'восток': 0}
for key, n in [input().split() for i in range(int(input()))]:
    xy[key] += int(n)
print(xy['восток'] - xy['запад'], xy['север'] - xy['юг'])


#
'''
Дан файл с таблицей в формате TSV с информацией о росте школьников разных классов.
Напишите программу, которая прочитает этот файл и подсчитает для каждого класса средний рост учащегося.
Файл состоит из набора строк, каждая из которых представляет собой три поля:
Класс Фамилия Рост
Класс обозначается только числом. Буквенные модификаторы не используются. Номер класса может быть от 1 до 11 включительно.
В фамилии нет пробелов, а в качестве роста используется натуральное число, но при подсчёте среднего требуется вычислить
значение в виде вещественного числа. Выводить информацию о среднем росте следует в порядке возрастания номера класса 
(для классов с первого по одиннадцатый). Если про какой-то класс нет информации, необходимо вывести напротив него прочерк.
В качестве ответа прикрепите файл с полученными данными о среднем росте.

Sample Input:
6	Вяххи	159
11	Федотов	172
7	Бондарев	158
6	Чайкина	153

Sample Output:
1 -
2 -
3 -
4 -
5 -
6 156.0
7 158.0
8 -
9 -
10 -
11 172.0
'''

#Решение с помощью ChatGPT
def calculate_average_height(file_name):
    # Создаем словарь, где для каждого класса будет список ростов
    class_heights = {i: [] for i in range(1, 12)}
    # Чтение файла
    with open(file_name, 'r', encoding='utf-8') as file:
        for line in file:
            class_num, surname, height = line.strip().split('\t')
            class_num = int(class_num)  # Преобразуем номер класса в число
            height = int(height)        # Преобразуем рост в число
            class_heights[class_num].append(height)
    # Вывод среднего роста для каждого класса
    for class_num in range(1, 12):
        if class_heights[class_num]:  # Если есть данные для класса
            average_height = sum(class_heights[class_num]) / len(class_heights[class_num])
            print(f"{class_num} {average_height}")
        else:  # Если нет данных для класса
            print(f"{class_num} -")
# Вызов функции с указанием имени файла
calculate_average_height('school_heights.tsv')


#
# Другое решение
lst1, lst2, lst3, lst4, lst5, lst6, lst7, lst8, lst9, lst10, lst11 = [], [], [], [], [], [], [], [], [], [], []
with open('dataset_3380_5.txt') as file:
    dct = {}
    for line in file:
        line1 = line.strip().split()
        if line1[0] == '1':
            lst1.append(float(line1[2]))
        if line1[0] == '2':
            lst2.append(float(line1[2]))
        if line1[0] == '3':
            lst3.append(float(line1[2]))
        if line1[0] == '4':
            lst4.append(float(line1[2]))
        if line1[0] == '5':
            lst5.append(float(line1[2]))
        if line1[0] == '6':
            lst6.append(float(line1[2]))
        if line1[0] == '7':
            lst7.append(float(line1[2]))
        if line1[0] == '8':
            lst8.append(float(line1[2]))
        if line1[0] == '9':
            lst9.append(float(line1[2]))
        if line1[0] == '10':
            lst10.append(float(line1[2]))
        if line1[0] == '11':
            lst11.append(float(line1[2]))
res1, res2, res3, res4, res5, res6, res7, res8, res9, res10, res11, = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
for i in lst1:
    if len(lst1) == 0:
        print('1', "-")
    else:
        res1 += i
print('1', res1 / len(lst1))
for i in lst2:
    if len(lst2) == 0:
        print('2', "-")
    else:
        res2 += i
print('2', res2 / len(lst2))
for i in lst3:
    if len(lst3) == 0:
        print('3', "-")
    else:
        res3 += i
print('3', res3 / len(lst3))
for i in lst4:
    if len(lst4) == 0:
        print('4', "-")
    else:
        res4 += i
print('4', res4 / len(lst4))
for i in lst5:
    if len(lst5) == 0:
        print('5', "-")
    else:
        res5 += i
print('5', res5 / len(lst5))
for i in lst6:
    if len(lst6) == 0:
        print('6', "-")
    else:
        res6 += i
print('6', res6 / len(lst6))
for i in lst7:
    if len(lst7) == 0:
        print('7', "-")
    else:
        res7 += i
print('7', res7 / len(lst7))
for i in lst8:
    if len(lst8) == 0:
        print('8', "-")
    else:
        res8 += i
print('8', res8 / len(lst8))
for i in lst9:
    if len(lst9) == 0:
        print('9', "-")
    else:
        res9 += i
print('9', res9 / len(lst9))
for i in lst10:
    if len(lst10) == 0:
        print('10', "-")
    else:
        res10 += i
print('10', res10 / len(lst10))
for i in lst11:
    if len(lst11) == 0:
        print('11', "-")
    else:
        res11 += i
print('11', res11 / len(lst11))


#
# Другое решение
with open('dataset_3380_5.txt') as inf:
    r = [[int(i), 0, 0] for i in range(1, 12)]
    for line in inf:
        line = line.strip().split('    ')
        for i in r:
            if i[0] == int(line[0]):
                i[1] += int(line[2])
                i[2] += 1
    with open('res_text.txt', 'w') as ouf:
        for i in r:
            if i[2] == 0:
                ouf.write(str(i[0]) + ' ' + '-' + '\n')
            else:
                ouf.write(str(i[0]) + ' ' + str(i[1]/i[2]) + '\n')

